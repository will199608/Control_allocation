# -*- coding: utf-8 -*-
#Control_allocation.CA([35,-0.68700545,-0.68700545,-2.13014,-0.294604,0.294604],[1.81138,-0.000224105,0,0,0,0.000347311])
import numpy as np 
from cvxopt import matrix
from cvxopt import solvers
def CA(Tau,Vel):
    A_fin=0.00803162
    CL=0.0873
    low=997
    d_fin=0.13716
    d_rudder=0.429
    P=np.array([[1,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,1,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,1,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,1,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,1,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,1,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,1,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,1,0,0,0,0,0],
         [0,0,0,0,0,0,0,0,1000,0,0,0,0],
         [0,0,0,0,0,0,0,0,0,1000,0,0,0],
         [0,0,0,0,0,0,0,0,0,0,1000,0,0],
         [0,0,0,0,0,0,0,0,0,0,0,1000,0],
         [0,0,0,0,0,0,0,0,0,0,0,0,1000]])
    P=P.astype(np.double)
    P=matrix(P)
    q=np.array([0,0,0,0,0,0,0,0,0,0,0,0,0])
    q=q.astype(np.double)
    q=matrix(q)
    G=np.array([[1,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,1,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,1,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,1,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,1,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,1,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,1,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,1,0,0,0,0,0],
         [-1,0,0,0,0,0,0,0,0,0,0,0,0],
         [0,-1,0,0,0,0,0,0,0,0,0,0,0],
         [0,0,-1,0,0,0,0,0,0,0,0,0,0],
         [0,0,0,-1,0,0,0,0,0,0,0,0,0],
         [0,0,0,0,-1,0,0,0,0,0,0,0,0],
         [0,0,0,0,0,-1,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,-1,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,-1,0,0,0,0,0]])
    G=G.astype(np.double)
    G=matrix(G)
    h=np.array([15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15])
    h=h.astype(np.double)
    h=matrix(h)
    Vel_x=Vel[0]
    Tau5=np.array(Tau[1:6])
    KL=1/2*low*A_fin*Vel_x**2*CL
    A=np.array([[0,0,KL,KL,KL,KL,0,0,1,0,0,0,0],
             [-KL,-KL,0,0,0,0,-KL,-KL,0,1,0,0,0],
             [d_fin*KL, -d_fin*KL, d_fin*KL, -d_fin*KL, d_fin*KL, -d_fin*KL,d_fin*KL, -d_fin*KL,0,0,1,0,0],
             [d_rudder*KL, d_rudder*KL, 0, 0, 0, 0,-d_rudder*KL, -d_rudder*KL,0,0,0,1,0],
             [0, 0, -d_rudder*KL, -d_rudder*KL, d_rudder*KL, d_rudder*KL,0,0,0,0,0,0,1]]
             )
    A=A.astype(np.double)
    A=matrix(A)
    Tau5=Tau5.astype(np.double)
    b=matrix(Tau5)
    sol = solvers.qp(P,q,G,h,A,b)
    return(sol['x'][0:8])

